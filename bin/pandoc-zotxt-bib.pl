#!/usr/bin/env perl
# pandoc-zotxt-bib.pl --- generate .bib from Zotero for pandoc document

use v5.30;

use strict;
use warnings;
use utf8;

use Getopt::Long;
use IPC::Run3 qw(run3);
use JSON qw(decode_json);
use LWP::UserAgent ();
use POSIX qw(strftime);

my $zotxt_port = "23119";
my $zotxt_host = "127.0.0.1";
my $doc_type   = "markdown";

GetOptions ("port|p" => \$zotxt_port,
	    "host|h" => \$zotxt_host,
	    "type|t" => \$doc_type)
    or die "command line error: $!";

my $zotxt = "http://$zotxt_host:$zotxt_port/zotxt";

my $document = shift;
my @cits;
my $docjson;

# Collect JSON representation of document from Pandoc.
my @cmd;
if ($document eq '-') {	    # if '-', read from stdin (we omit the
			    # input argument to pandoc, which will
			    # lead to run3 passing our stdin to it.
    @cmd = ('pandoc', '-f', $doc_type, '-t', 'json');
} else {
    @cmd = ('pandoc', '-f', $doc_type, '-t', 'json', $document);
}

run3 \@cmd, undef, \$docjson;

# Collect citations into @cits.
my $decoder = JSON->new->filter_json_object(sub {
	my $h = shift;
	if (exists $h->{citationId}) {
	    unshift @cits, $h->{citationId};
	}
	return $h;
});

$decoder->decode ($docjson) or die "error parsing JSON: $!";

# Fetch BibTeX.

my $ua = LWP::UserAgent->new (
    timeout => 10,
    protocols_allowed => ['http']
);
my $pl = join ',', @cits;

$ua->env_proxy;

my $r = $ua->get("$zotxt/items?format=bibtex&citekey=$pl");

binmode STDOUT, ':utf8';

my $now = strftime("%F%T%z", localtime);

if ($r->is_success) {
    say "%% BibTeX database generated using Zotero via zotxt.";
    say "%%";
    say "%% CAUTION: AUTOGENERATED FILE.";
    say "%%";
    say "%% This database has been generated automaticall using.";
    say "%% $0 on $now.";
    say "%% Your edits may be overwritten if you modify";
    say "%% this file. Do your modifications on Zotero instead, and";
    say "%% then re-run $0.";
    say "%%";
    say "";
    say $r->decoded_content;
} else {
    say "zotxt error:";
    say $r->status_line;
    say $r->decoded_content;
    die "exiting due to zotxt error";
}


=pod

=encoding utf8

=head1 pandoc-zotxt-bib.pl --- generate .bib from Zotero for pandoc document

=head2 Synopsis

=over

pandoc-zotxt-bib.pl [-p PORT] [-h HOST] DOCUMENT

=back

=head2 Options

=over

    -p|--port PORT

=over

    Zotxt server port, default is 23119.

=back

=back

=over

    -h|--host PORT

=over

    Host domain for the zotxt server, default is 127.0.0.1.

=back

=back

=over

    -t|--type TYPE

=over

    Document's file type.  Defaults to Pandoc's default, which
    should be markdown.

=back

=back


=head2 Arguments

=over

    DOCUMENT

=over

    The Pandoc document to collect citations from.  If DOCUMENT is '-',
    the script will operate on the standard input.

=back

=back

=head2 Description

This script will use zotxt extension's HTTP endpoint to retrieve
data for citations in a Pandoc document, and will generate
a sufficient BibTeX database.

The default settings for the options should be okay for most setups.
You will of course need to have Zotero running and the zotxt extension
installed.  Assuming that is the case, the BibTeX database can be acquired
as such:

=over

$ perl pandoc-zotxt-bib.pl TheDocument.markdown > Bibliography.bib

=back

or

=over

$ perl pandoc-zotxt-bib.pl - < TheDocument.markdown > Bibliography.bib

=back

The output will contain a warning comment up top, reminding the file was
autogenerated.

zotxt's errors can be a bit cryptic.  If you get a 500, make sure all the
keys in your document do correspond to an existing item's citation key
in the Zotero database.  (If you feel like improving the error reporting
in that department, patches welcome!)

=cut

