#!/usr/bin/env perl
# git-clonex --- clone an external git repo the way I like

use v5.24;

use strict;
use warnings;

use File::Temp qw(tempdir);
use Getopt::Long;
use IPC::Run3 qw(run3);

my $dir  = "$ENV{HOME}/co/External";
my $dry  = 0;
my $tmp  = 0;
my $yank = 0;
my $extra = '';

if (exists($ENV{GIT_CLONEX_DIR})) {
    $dir = $ENV{GIT_CLONEX_DIR}
}

GetOptions ("temporary|tmp" => \$tmp,
	    "dry|d"         => \$dry,
	    "yank|y"        => \$yank,
	    "extra=s"	    => \$extra,)
    or die "Command line error: $!";

my $repo_url = shift @ARGV or die "usage: git clonex [-dty] GITHUB-URL";

# TODO: parse using Shell::Parser?
my @extra_args = split / /, $extra;


unless ($repo_url =~ /
           https? :\/\/ (www\.)?
           (?<forge>[^\.]+)
           \. [^\/]+ \/
           (?<user>[\w\d\-_]+) \/
           (?<repo>[\w\d\-_]+) \/?
       /x )
   {
    die "Bad URL: $repo_url";
} else {
    my $local_path;
    if ($tmp) {
	my $dirname = "$+{forge}-$+{user}-$+{repo}";
	$local_path = tempdir ("$dirname-XXXXXXXX", TMPDIR => 1);
    } else {
	$local_path = "$dir/$+{forge}-$+{user}-$+{repo}";
    }
    my @git_cmd = ('git', 'clone', @extra_args, $repo_url, $local_path);
    if ($dry) {
	say "Dry run, doing nothing.";
	say "Would have ran: @git_cmd";
    } else {
	run3 (\@git_cmd) or die "git error: $!";
    }
    say "\n    Type this to go to the checkout:";
    say "      \$ cd $local_path";
    if ($yank) {
	my @cmd = ("xclip", "-i");
	run3 (\@cmd, \$local_path) or die "xclip: $!";
	say "\nYanked checkout path as selection!";
    }
}

=pod

=encoding utf8

=head1 git-clonex --- clone an external git repo the way I like

=head2 Synopsis

=over

git clonex [-dty] [--extra EXTRA_ARGS] REPO-URL

=back

=head2 Flags

=over

    -t|--temporary

=over

    Make a checkout in under the system's temporary directory.

=back

    -y|--yank

=over

    Copy the checkout path into the clipboard and selection if possible.

=back

    -d|--dry

=over

    Do not actually clone the repository, do a dry run.

=back

=back

=head2 Options

    --extra EXTRA_ARGS

=over

    Pass EXTRA_ARGS to "git clone" directly.

    Currently, this uses a dumb string split on the ASCII/UTF-8
    space character.

=back

=back



=head2 Arguments

=over

    REPO-URL

=over

    The forge URL for the repository.

=back

=back

=head2 Environment

=over

    GIT_CLONEX_DIR

=over

    Directory to clone under by default.  The default value is
    "$HOME/co/External/".

=back

=back

=head2 Description

Clone a repo from a git forge to an appropriate location with an
appropriate name.  Appropriate as in according to my own
conventions.

This works for git forge URLs in the common format

=over

domain.tld/user/repo

=back

used by most common git forges, like Github, Gitlab, etc.

=cut
